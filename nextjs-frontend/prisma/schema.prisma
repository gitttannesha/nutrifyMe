datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  emailVerified   DateTime?
  image           String?
  password        String
  age             Int
  gender          String
  height          Float
  weight          Float
  bmi             Float
  sugarLevel      Float
  hasDiabetes     Boolean   @default(false)
  hasHypertension Boolean   @default(false)
  cholesterol     Boolean
  activityLevel   String
  accounts        Account[]
  sessions        Session[]
  healthScores    HealthScore[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthScore {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  productBarcode String
  score         Float
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productBarcode], references: [barcode])
}

model Product {
  barcode     String   @id @map("_id")
  name        String
  sugar       Float
  sodium      Float
  ingredients String
  healthScores HealthScore[]
}